{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"oldCon",
				"oldContactMap"
			],
			[
				"is",
				"isBefore"
			],
			[
				"Contact",
				"associateContactsToAccounts"
			],
			[
				"account",
				"accountMap"
			],
			[
				"created",
				"createdAccounts"
			],
			[
				"create",
				"createContact"
			],
			[
				"a",
				"accountID"
			],
			[
				"cre",
				"createAccount"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/classes/Day5Maps.cls",
			"settings":
			{
				"buffer_size": 1574,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "trigger LeadTrigger on Lead (before insert, \n\t\t\t\t\t\t\tbefore update, \n\t\t\t\t\t\t\tbefore delete, \n\t\t\t\t\t\t\tafter insert, \n\t\t\t\t\t\t\tafter update, \n\t\t\t\t\t\t\tafter delete, \n\t\t\t\t\t\t\tafter undelete\n\n) {\n\n\n\tSystem.debug('Trigger.isInsert: ' + Trigger.isInsert);\n\tSystem.debug('Trigger.isUpdate: ' + Trigger.isUpdate);\n\tSystem.debug('Trigger.isDelete: ' + Trigger.isDelete);\n\tSystem.debug('Trigger.isUndelete: ' + Trigger.isUndelete);\n\n\n\tSystem.debug('Trigger.isAfter: ' + Trigger.isAfter);\n\tSystem.debug('Trigger.isBefore: ' + Trigger.isBefore);\n\t\n\t// records in new state being inserted to the DB\n\tList<Lead> leads = Trigger.new;\n\tMap<Id, Lead> leadMap = Trigger.newMap;\n\t\n\t// records are populated with old values before update\n\tList<Lead> oldLeads = Trigger.old;\n\tMap<Id, Lead> oldleadMap = Trigger.oldMap;\n\n\n\tSystem.debug('Trigger.new: ' + Trigger.new);\n\tSystem.debug('Trigger.newMap: ' + Trigger.newMap);\n\tSystem.debug('Trigger.old: ' + Trigger.old);\n\tSystem.debug('Trigger.oldMap: ' + Trigger.oldMap);\n\n\n\n\n\t// common way to choose what code to call and when\n\tif(Trigger.isBefore && trigger.isInsert) {\n\t\t// call your code to do stuff\n\t\t// call helper methods\n\n\t\t// Change first lead title to MoFo NO DML NEEDED IN \"BEFORE\" CONTEXT\n\t\tleads[0].Title = 'MoFo';\n\n\t} else if (Trigger.isAfter && trigger.isUpdate) {\n\t\t// do stuff after update!\n\t\t// call helper methods\n\n\t\tleads[0].Title = leads[0].Id;\n\t}\t\n\n\n\n}",
			"file": "src/triggers/LeadTrigger.trigger",
			"file_size": 1390,
			"file_write_time": 131540539235574418,
			"settings":
			{
				"buffer_size": 1390,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "trigger ContactTrigger on Contact (after insert, after update, after delete) {\n\n\n\tif(Trigger.isAfter && Trigger.isInsert){\n\n\t\tContactTriggerHelper.handleAfterInsert(Trigger.new);\n\n\t} else if(Trigger.isAfter && Trigger.isUpdate){\n\n\t\tContactTriggerHelper.handleAfterUpdate(Trigger.new, Trigger.oldMap);\n\n\t} else if(Trigger.isAfter && Trigger.isDelete){\n\n\t\tContactTriggerHelper.handleAfterDelete(Trigger.old);\n\n\t}\n\n\n\n\n}",
			"file": "src/triggers/ContactTrigger.trigger",
			"file_size": 416,
			"file_write_time": 131541340344899151,
			"settings":
			{
				"buffer_size": 416,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "public with sharing class ContactTriggerHelper {\n\t\n\tpublic static void handleAfterInsert(List<Contact> contacts){\n\t\t// if contact has an account assigned, update number of contacts on account\n\t\tList<Account> accounts = queryAccountsFromContacts(contacts);\n\n\t\tupdateAccountNumberOfContacts(accounts);\n\t}\n\n\tpublic static void handleAfterUpdate(List<Contact> contacts, Map<ID, Contact> oldContactMap){\n\t\t// Loop through contacts\n\t\t// Check if accountId was changed\n\t\t// 1) null -> not null ---> update the account (number of contacts)\n\t\t// 2) not null -> null ---> update the old account (number of contacts)\n\t\t// 3) not null -> not null (contact assigned to different account) --->update both accounts\n\t\tSet<Id> accountIds = new Set<Id>();\n\n\t\tfor(Contact contact : contacts){\n\t\t\tContact oldContact = oldContactMap.get(contact.Id);\n\t\t\tif(contact.AccountId != oldContact.AccountId){\n\t\t\t\t// the account id was changed!\n\t\t\t\tif(contact.AccountId != null){\n\t\t\t\t\taccountIds.add(contact.AccountId);\n\t\t\t\t}\n\t\t\t\tif(oldcontact.AccountId != null){\n\t\t\t\t\taccountIds.add(oldContact.AccountId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\t\tList<Account> accounts = queryAccounts(accountIds);\n\t\t\tupdateAccountNumberOfContacts(accounts);\n\n\n\t}\n\n\tpublic static void handleAfterDelete (List<Contact> contacts){\n\n\t}\n\n\tprivate static List<Account> queryAccountsFromContacts(List<Contact> contacts) {\n\t\tSet<Id> accountIds = new Set<Id>();\n\n\t\tfor(Contact contact : contacts){\n\t\t\tif(contact.accountId != null) {\n\t\t\t\taccountIds.add(contact.accountId);\n\t\t\t}\n\t\t}\n\n\t\treturn queryAccounts(accountIds);\n\t}\n\n\tprivate static List<Account> queryAccounts(Set<Id> accountIds){\n\t\tList<Account> accounts = new List<Account>();\n\n\t\tif(accountIds.size() > 0){\n\t\t\taccounts = [\n\t\t\t\tSELECT Id, Current_Number_of_Contacts__c,\n\t\t\t\t\t(SELECT Id FROM Contacts)\n\t\t\t\tFROM Account\n\t\t\t\tWHERE Id IN :accountIds\n\n\t\t\t];\n\t\t}\n\n\t\n\t\treturn accounts;\n\t}\n\n\tprivate static void updateAccountNumberOfContacts(List<Account> accounts){\n\t\tif(accounts.size() > 0){\n\n\t\t\tfor(Account account : accounts){\n\t\t\t\tInteger numberofContacts = account.Contacts.size();\n\t\t\t\taccount.Current_Number_of_Contacts__c = numberofContacts;\n\n\t\t\t}\n\n\n\n\t\t\t//put list into a map so we can easily retrieve the acccount we want\n\t\t\t//Map<Id, Account> accountMap = new Map<Id, Account>(accounts);\n\t\t\t//loop contacts, find matching account, update number of contacts field\n\t\t\t//for(Contact contact : contacts){\n\t\t\t//\tif (contact.accountId != null){\n\t\t\t//\t\tAccount account = accountMap.get(contact.accountId);\n\t\t\t//\t\taccount.Current_Number_of_Contacts__c = account.Current_Number_of_Contacts__c == null ? 0 : account.Current_Number_of_Contacts__c;\n\n\t\t\t//\t\taccount.Current_Number_of_Contacts__c += 1;\n\t\t\t//\t}\n\t\t\t//}\n\t\t\tupdate accounts;\n\t\t}\n\t}\n}",
			"file": "src/classes/ContactTriggerHelper.cls",
			"file_size": 2714,
			"file_write_time": 131541406639297965,
			"settings":
			{
				"buffer_size": 2714,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 173.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 675.0
	},
	"console":
	{
		"height": 297.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"a.\timport urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/AndersonMark/Documents/apex-bootcamp",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes"
	],
	"file_history":
	[
		"/C/Users/AndersonMark/Desktop/Exhibit A Translation Table.csv",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes/Day0Example.cls",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes/Day0Example.cls-meta.xml",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes/Day2GitExample.cls",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes/Day3ListsAndLoops.cls",
		"/C/Users/AndersonMark/Documents/apex-bootcamp/src/classes/Day4CreateAccountsWtihContacts.cls",
		"/C/Users/AndersonMark/Downloads/query-Product2-mark.anderson@atginfo.com.cpqdev1-20171023144521.csv",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Sig Block",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Alignment",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Import Tag",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Subsidiary Address",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Template Top",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Border",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Spacing",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/field integration format",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Check Boxes",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Total Amount",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Bill to & Ship",
		"/C/Users/AndersonMark/Desktop/Quote Template Formatting/Logo",
		"/C/Users/AndersonMark/Desktop/Common Quote Template Formats",
		"/C/Users/AndersonMark/AppData/Local/Microsoft/Windows/INetCache/Content.Outlook/QH8R9Z83/revenue_recognition_rules.cls",
		"/C/Users/AndersonMark/AppData/Local/Microsoft/Windows/INetCache/Content.Outlook/QH8R9Z83/revenue_periods.cls"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			";\n",
			",",
			"Account"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/classes/Day5Maps.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1574,
						"regions":
						{
						},
						"selection":
						[
							[
								1563,
								1563
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 673.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/triggers/LeadTrigger.trigger",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1390,
						"regions":
						{
						},
						"selection":
						[
							[
								990,
								990
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/triggers/ContactTrigger.trigger",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 416,
						"regions":
						{
						},
						"selection":
						[
							[
								411,
								411
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/classes/ContactTriggerHelper.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2714,
						"regions":
						{
						},
						"selection":
						[
							[
								1191,
								1191
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 51.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 238.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "apex-bootcamp.sublime-project",
	"replace":
	{
		"height": 63.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 63.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
